---
title: "Examples for phylo_gen3sis_tools"
author: "Marcelo H. Schwade"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
# Packages.
library(tidyr)
library(ape)
source("~/Dropbox/ada_simulations/mygen3sisfunctions/phylo_gen3sis_tools_1.R")

# Path names.
simulation_main <- "~/Dropbox/ada_simulations/simulation_output/"
simulation_path <- file.path(simulation_main)

#simulation_list <- read.table(file.path(simulation_main, "list_simulation_outputs.txt"), header=F)[,1]

timesteps_reference <- 10

```

You can add options to executable code like this

```{r}

sim <- "config_my_simulation"

setwd(file.path(simulation_path, sim))

# Set the output path. 
output_path <- file.path(simulation_main, "simulation_data", sim)
dir.create(output_path, recursive=T)

# Load the gen3sis simulation data.
# Species data at present time.
metacommunity_at_present <- readRDS(file.path("species", "species_t_0.rds"))

# Simulation resume.
gen3sis_simulation <- readRDS("sgen3sis.rds")
# Get phylogeny.
tree <- read.nexus("phy.nex")
  
# Basic parameters of the simulation.
Ntimesteps <- length(gen3sis_simulation$summary$phylo_summary[,"total"]) - 2
Nsites <- length(gen3sis_simulation$summary$`richness-final`[,1])
nSpeciesTotal <- gen3sis_simulation$summary$phylo_summary[Ntimesteps+2, "total"]
nSpeciesAlive <- gen3sis_simulation$summary$phylo_summary[Ntimesteps+2, "alive"]

```

```{r}
#########################################################################
# This suits only to test the richness compatibility.
#########################################################################

species_presence <- list()
  
for(species_id in 1:nSpeciesTotal){
  if(length(metacommunity_at_present[[species_id]]$abundance)>0){
    species_id_presence <- list(id=species_id, 
                                sites_with_presence=as.numeric(names(metacommunity_at_present[[species_id]]$abundance)))
    species_presence <- c(species_presence, list(species_id_presence))
    names(species_presence)[length(species_presence)] <- as.character(species_id)
  }
}

# Create the community matrix.
community_matrix <- matrix(0, nrow=Nsites, ncol=nSpeciesAlive)
colnames(community_matrix) <- names(species_presence)

# Built community matrix
for(species_id in names(species_presence)){
  community_matrix[species_presence[[species_id]]$sites_with_presence, species_id] <- 1
}

# Richness verification
richness_final <- replace_na(gen3sis_simulation$summary$`richness-final`[,3], 0)
richness <- rowSums(community_matrix)
if(all(richness==richness_final)){
  print("Richness verification is OK!")
}
else{
  print("An incompatibility was found in the richness verification. The process was aborted.")
  break
}
```

```{r}
#########################################################################
# Rename nodes and tips of the phylogeny.
#########################################################################

# Get the id and the height of the nodes and rename the phylogeny.
renamedPhylo <- renamePhylo(tree)
tree_n <- renamedPhylo$tree

# For each node/tip get the species ocurrences at specific time.
# The results are agregated in a list of ocurrences.
ocurrences <- list()

for(node in 1:(2*nSpeciesTotal - 1)){

  id <- renamedPhylo$nameIndexGuide$id[node]
  time <- Ntimesteps - renamedPhylo$nameIndexGuide$height[node]

  file_to_load <- paste(paste("species_t", time, sep="_"), "rds", sep=".")

  metacommunity_at_time <- readRDS(file.path("species", file_to_load))

  ocurrences_node <- list(as.numeric(names(metacommunity_at_time[[id]]$abundance)))
  names(ocurrences_node) <- rownames(renamedPhylo$nameIndexGuide)[node]
  
  ocurrences <- c(ocurrences, ocurrences_node)
  
}

# Verify the list with the ocurrences of the nodes.

# Create a ocurrence matrix of the nodes.
node_site_matrix <- matrix(0, nrow=Nsites, ncol=(2*nSpeciesTotal - 1))
rownames(node_site_matrix) <- names(gen3sis_simulation$summary$`richness-final`[,1])
colnames(node_site_matrix) <- names(ocurrences)

for(node in names(ocurrences)){
  node_site_matrix[ocurrences[[node]], node] <- 1
}

# Remove the extinct species from phylogeny and from the node_site_matrix .
tree_n_alive <- drop.fossil(tree_n)
node_names_alive <- c(tree_n_alive$tip.label, tree_n_alive$node.label)
node_site_matrix_alive <- node_site_matrix[, node_names_alive]

# Site coordinates.
coordinates <- data.frame(long=gen3sis_simulation$summary$`richness-final`[,1], lat=gen3sis_simulation$summary$`richness-final`[,2])
rownames(coordinates) <- rownames(node_site_matrix)

# Save node-site data.
node_site_data <- list(node_site_matrix=node_site_matrix_alive, nameIndexGuide=renamedPhylo$nameIndexGuide, coordinates=coordinates)
file_to_save <- paste("node_site_data", "rds", sep=".")
saveRDS(node_site_data, file=file.path(output_path, file_to_save))

```

The `echo: false` option disables the printing of code (only output is displayed).
